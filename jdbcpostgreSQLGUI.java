/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.sql.*;
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import javax.swing.JOptionPane;
import java.util.*; 
import java.util.Arrays; 
import javax.swing.JFileChooser;
import javax.swing.JFrame;
/**
 *
 * @author emmy0
 */
public class jdbcpostgreSQLGUI extends JFrame {

    static Connection conn = null;

    /**
     * Creates new form firstform
     */
    public jdbcpostgreSQLGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        searchFor = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        inputName = new javax.swing.JTextArea();
        rangeYearLowerBound = new javax.swing.JSpinner();
        rangeYear = new javax.swing.JCheckBox();
        rangeRatings = new javax.swing.JCheckBox();
        rangeYearUpperBound = new javax.swing.JSpinner();
        rangeRatingsLowerBound = new javax.swing.JSpinner();
        rangeRatingsUpperBound = new javax.swing.JSpinner();
        saveToFile = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        displayMainTitle = new javax.swing.JCheckBox();
        displayStartingYear = new javax.swing.JCheckBox();
        displayEndingYear = new javax.swing.JCheckBox();
        displayRatings = new javax.swing.JCheckBox();
        displayRegion = new javax.swing.JCheckBox();
        displayDuration = new javax.swing.JCheckBox();
        displayCast = new javax.swing.JCheckBox();
        rangeDuration = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        searchQuery = new javax.swing.JButton();
        rangeDurationLowerBound = new javax.swing.JSpinner();
        rangeDurationUpperBound = new javax.swing.JSpinner();
        displayMovies = new javax.swing.JCheckBox();
        displayTvShows = new javax.swing.JCheckBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        output = new javax.swing.JTextPane();
        inputLabel = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        clearChecks = new javax.swing.JButton();
        selectRegion = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        actor1 = new javax.swing.JTextPane();
        jScrollPane4 = new javax.swing.JScrollPane();
        actor2 = new javax.swing.JTextPane();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        recommendations = new javax.swing.JCheckBox();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        searchFor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Actor", "Director", "Movies", "Tv shows" }));
        searchFor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchForActionPerformed(evt);
            }
        });

        inputName.setColumns(20);
        inputName.setRows(5);
        inputName.setFocusCycleRoot(true);
        jScrollPane1.setViewportView(inputName);

        rangeYearLowerBound.setModel(new javax.swing.SpinnerNumberModel(1800, 1800, 2019, 1));
        rangeYearLowerBound.setEnabled(false);
        rangeYearLowerBound.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rangeYearLowerBoundStateChanged(evt);
            }
        });

        rangeYear.setText("Year");
        rangeYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rangeYearActionPerformed(evt);
            }
        });

        rangeRatings.setText("Ratings");
        rangeRatings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rangeRatingsActionPerformed(evt);
            }
        });

        rangeYearUpperBound.setModel(new javax.swing.SpinnerNumberModel(1800, 1800, 2019, 1));
        rangeYearUpperBound.setEnabled(false);
        rangeYearUpperBound.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rangeYearUpperBoundStateChanged(evt);
            }
        });

        rangeRatingsLowerBound.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(5.0f), Float.valueOf(0.0f), Float.valueOf(10.0f), Float.valueOf(0.1f)));
        rangeRatingsLowerBound.setEnabled(false);
        rangeRatingsLowerBound.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rangeRatingsLowerBoundStateChanged(evt);
            }
        });

        rangeRatingsUpperBound.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(5.0f), Float.valueOf(0.0f), Float.valueOf(10.0f), Float.valueOf(0.1f)));
        rangeRatingsUpperBound.setEnabled(false);
        rangeRatingsUpperBound.setPreferredSize(new java.awt.Dimension(66, 20));
        rangeRatingsUpperBound.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rangeRatingsUpperBoundStateChanged(evt);
            }
        });

        saveToFile.setText("Save to file");
        saveToFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveToFileActionPerformed(evt);
            }
        });

        jLabel1.setText("Search For");

        jLabel2.setText("Display:");

        displayMainTitle.setText("Main Title");
        displayMainTitle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayMainTitleActionPerformed(evt);
            }
        });

        displayStartingYear.setText("Starting year");
        displayStartingYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayStartingYearActionPerformed(evt);
            }
        });

        displayEndingYear.setText("End Year");
        displayEndingYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayEndingYearActionPerformed(evt);
            }
        });

        displayRatings.setText("Ratings");

        displayRegion.setText("Region");

        displayDuration.setText("Duration");

        displayCast.setText("Cast");
        displayCast.setEnabled(false);

        rangeDuration.setText("Duration ");
        rangeDuration.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rangeDurationActionPerformed(evt);
            }
        });

        jLabel3.setText("Select Range:");
        jLabel3.setToolTipText("");

        searchQuery.setText("Search");
        searchQuery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchQueryActionPerformed(evt);
            }
        });

        rangeDurationLowerBound.setModel(new javax.swing.SpinnerNumberModel(120, 0, 1500, 1));
        rangeDurationLowerBound.setEnabled(false);
        rangeDurationLowerBound.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rangeDurationLowerBoundStateChanged(evt);
            }
        });

        rangeDurationUpperBound.setModel(new javax.swing.SpinnerNumberModel(120, 0, 1500, 1));
        rangeDurationUpperBound.setEnabled(false);
        rangeDurationUpperBound.setPreferredSize(new java.awt.Dimension(68, 20));
        rangeDurationUpperBound.setRequestFocusEnabled(false);
        rangeDurationUpperBound.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rangeDurationUpperBoundStateChanged(evt);
            }
        });

        displayMovies.setText("Movies");

        displayTvShows.setText("Tv Shows");

        output.setEditable(false);
        jScrollPane2.setViewportView(output);

        inputLabel.setText("Enter Actor Name:");

        jLabel4.setText("Output:");

        clearChecks.setText("Clear Selection");
        clearChecks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearChecksActionPerformed(evt);
            }
        });

        selectRegion.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Any", "US", "MX", "FR" }));
        selectRegion.setToolTipText("Select Region");
        selectRegion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectRegionActionPerformed(evt);
            }
        });

        jLabel6.setText("Region:");

        jScrollPane3.setViewportView(actor1);

        jScrollPane4.setViewportView(actor2);

        jLabel7.setText("X Degrees of separation");

        jLabel8.setText("To");

        recommendations.setText("Recommendations");
        recommendations.setEnabled(false);
        recommendations.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                recommendationsStateChanged(evt);
            }
        });
        recommendations.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recommendationsActionPerformed(evt);
            }
        });

        jLabel9.setText("Actor 1");

        jLabel10.setText("Actor 2");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(searchFor, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(inputLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(116, 116, 116))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(15, 15, 15)
                                .addComponent(recommendations)
                                .addGap(10, 10, 10)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(selectRegion, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                            .addComponent(rangeDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(rangeDurationLowerBound, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(rangeYear, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(rangeRatings))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(rangeRatingsLowerBound)
                                                .addComponent(rangeYearLowerBound)))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(rangeYearUpperBound, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(rangeRatingsUpperBound, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(rangeDurationUpperBound, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE))))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 539, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(searchQuery, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(saveToFile, javax.swing.GroupLayout.DEFAULT_SIZE, 103, Short.MAX_VALUE)))
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(23, 23, 23)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(displayMainTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(displayCast, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(displayRatings, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(displayDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(displayRegion, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(displayStartingYear))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(displayMovies, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(displayTvShows, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(displayEndingYear, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(clearChecks)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 145, Short.MAX_VALUE)
                                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING))
                                        .addGap(22, 22, 22)
                                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchFor, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addComponent(inputLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rangeYear)
                            .addComponent(rangeYearLowerBound, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rangeYearUpperBound, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(recommendations))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(rangeRatings)
                                .addComponent(rangeRatingsLowerBound, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(rangeRatingsUpperBound, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(rangeDurationLowerBound, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(rangeDurationUpperBound, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(rangeDuration))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel6)
                        .addComponent(selectRegion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jLabel5)))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(displayMainTitle)
                    .addComponent(displayCast)
                    .addComponent(displayDuration)
                    .addComponent(displayRegion)
                    .addComponent(displayStartingYear)
                    .addComponent(displayEndingYear)
                    .addComponent(displayRatings))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(displayMovies)
                        .addComponent(displayTvShows))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(clearChecks)))
                .addGap(8, 8, 8)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(searchQuery)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(saveToFile))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(42, 42, 42)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(356, Short.MAX_VALUE))
        );

        rangeDurationLowerBound.getAccessibleContext().setAccessibleDescription("Lower Bound");
        rangeDurationUpperBound.getAccessibleContext().setAccessibleDescription("Upper Bound");

        pack();
    }// </editor-fold>                        

    private void searchForActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
        String itemSelected = searchFor.getSelectedItem()+"";
        
        if(itemSelected.equals("Tv shows")){//Movies, Tv shows, Actor, Director
             inputName.setEnabled(false);
             displayMovies.setEnabled(false);
             displayTvShows.setEnabled(false);
             inputLabel.setText("Enter Tv Show Name:");
             recommendations.setEnabled(true);
        }else if(itemSelected.equals("Movies")){
            inputName.setEnabled(false);
            displayMovies.setEnabled(false);
             displayTvShows.setEnabled(false);
             inputLabel.setText("Enter Movie Name:");
             recommendations.setEnabled(true);
        }else if(itemSelected.equals("Actor")){
            inputName.setEnabled(true);
            displayMovies.setEnabled(true);
             displayTvShows.setEnabled(true);
             inputLabel.setText("Enter Actor Name:");
             recommendations.setEnabled(false);
        }else if(itemSelected.equals("Director")){
            inputName.setEnabled(true);
            displayMovies.setEnabled(true);
             displayTvShows.setEnabled(true);
            inputLabel.setText("Enter Director Name:");
            recommendations.setEnabled(false);
        }
    }                                         

    private void rangeYearActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
        if(rangeYear.isSelected()){
            rangeYearLowerBound.setEnabled(true);
            rangeYearUpperBound.setEnabled(true);
        }else{
            rangeYearLowerBound.setEnabled(false);
            rangeYearUpperBound.setEnabled(false);
        }
    }                                         

    private void displayMainTitleActionPerformed(java.awt.event.ActionEvent evt) {                                                 
        // TODO add your handling code here:
    }                                                

    private void displayStartingYearActionPerformed(java.awt.event.ActionEvent evt) {                                                    
        // TODO add your handling code here:
    }                                                   

    private void displayEndingYearActionPerformed(java.awt.event.ActionEvent evt) {                                                  
        // TODO add your handling code here:
    }                                                 

    private void rangeRatingsActionPerformed(java.awt.event.ActionEvent evt) {                                             
        // TODO add your handling code here:
        if(rangeRatings.isSelected()){
            rangeRatingsLowerBound.setEnabled(true);
            rangeRatingsUpperBound.setEnabled(true);
        }else{
            rangeRatingsLowerBound.setEnabled(false);
            rangeRatingsUpperBound.setEnabled(false);
        }
    }                                            

    private void rangeDurationActionPerformed(java.awt.event.ActionEvent evt) {                                              
        // TODO add your handling code here:
        if(rangeDuration.isSelected()){
            rangeDurationLowerBound.setEnabled(true);
            rangeDurationUpperBound.setEnabled(true);
        }else{
            rangeDurationLowerBound.setEnabled(false);
            rangeDurationUpperBound.setEnabled(false);
        }
    }                                             

    private void searchQueryActionPerformed(java.awt.event.ActionEvent evt) {                                            
      
		///////////////////////////////RECOMMENDATIONS////////////////////////////////////////////////////
        if(recommendations.isSelected()){

            System.out.println("Processing");
			
            try{
			String suggest = "";
			String movieName = inputName.getText();
			String director = "";
			Statement stmt1 = conn.createStatement();
			
			//create an SQL statement
			String sqlSt = "SELECT namebasics.primaryName FROM namebasics " +
							"INNER JOIN principals ON namebasics.nconst = principals.nconst " +
							"INNER JOIN titlebasics ON principals.tconst = titlebasics.tconst AND titlebasics.primaryTitle = \'" + movieName + "\' " +
							"WHERE titlebasics.primaryTitle = \'" + movieName + "\' AND titlebasics.titleType = 'movie' AND principals.category = 'director' ;";
            //send statement to DBMS
			ResultSet rs1 = stmt1.executeQuery(sqlSt);  
			//Get director
		    while(rs1.next())
		    { 	
				director = rs1.getString("primaryName");
		    }
		   
			sqlSt = "SELECT titlebasics.primaryTitle, titlebasics.startYear, ratings.averageRating FROM namebasics " +
					"INNER JOIN crew ON namebasics.nconst = crew.directors " + 
					"INNER JOIN titlebasics ON titlebasics.tconst = crew.tconst " +
					"INNER JOIN ratings ON ratings.tconst = titlebasics.tconst " +
					"WHERE namebasics.primaryName = \'" + director + "\' AND titlebasics.titleType = 'movie' " + 
					"ORDER BY RANDOM() " +
					"LIMIT 1 ;";   		   
		   	//send statement to DBMS
			rs1 = stmt1.executeQuery(sqlSt);
			
			
		    //OUTPUT
			suggest = suggest + "Movie Suggestion from " + director + " (Director of " + movieName + ") \r\n\r\n";
			while (rs1.next()) {
				 suggest = suggest + "Name of Movie: ";
				 suggest = suggest + rs1.getString("primaryTitle");
				 suggest = suggest + "\r\nRelease Year: ";
				 suggest = suggest + rs1.getString("startYear"); 
				 suggest = suggest + "\r\nIMDb Rating: ";
				 suggest = suggest + rs1.getString("averageRating"); 				 
				 output.setText(suggest);
			} 

            System.out.println("Done");
		   
		    } catch (Exception e){
				System.out.println("Error accessing Database.");
			}  
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			
        }else{
         String getFromSQL = "SELECT";
        String innerJoinLocation = "";
        String rangeLocation = " WHERE";
        boolean somethingSelected = false;
        boolean innerJoin = false;
        boolean range = false;
        String items = searchFor.getSelectedItem()+"";
        
        output.setText("");
        
        //chooses what to display
        if(displayMainTitle.isSelected()){
            getFromSQL = getFromSQL + " titlebasics.primaryTitle";
            somethingSelected = true;
        }
        
        if(items.equals("Actor")){
            innerJoin = true;
            innerJoinLocation = innerJoinLocation + " INNER JOIN principals ON namebasics.nconst = principals.nconst";
            innerJoinLocation = innerJoinLocation + " INNER JOIN titlebasics ON titlebasics.tconst = principals.tconst";
            range = true;
            rangeLocation = rangeLocation + " principals.category = 'actor'";
        }else if(items.equals("Director")){
            innerJoin = true;
            innerJoinLocation = innerJoinLocation + " INNER JOIN principals ON namebasics.nconst = principals.nconst";
            innerJoinLocation = innerJoinLocation + " INNER JOIN titlebasics ON titlebasics.tconst = principals.tconst";
            range = true;
            rangeLocation = rangeLocation + " principals.category = 'director'";
        }
        
        if(displayRatings.isSelected() || rangeRatings.isSelected()){
            
            if(displayRatings.isSelected()){
				if(somethingSelected){
                getFromSQL = getFromSQL + ",";
            }
											
                getFromSQL = getFromSQL + " ratings.averageRating";
                somethingSelected = true;
            }
            
            innerJoin = true;
            innerJoinLocation = innerJoinLocation + " INNER JOIN ratings ON titlebasics.tconst = ratings.tconst";
        }
        
        
        
        if(displayDuration.isSelected()){
            if(somethingSelected){
                getFromSQL = getFromSQL + ",";
            }
            getFromSQL = getFromSQL + " titlebasics.runtimeMinutes";
            somethingSelected = true;
        }
        String s = selectRegion.getSelectedItem()+"";
        if(displayRegion.isSelected() || !s.equals("Any")){
            
            if(displayRegion.isSelected()){
				if(somethingSelected){
                getFromSQL = getFromSQL + ",";
            }
										   
                getFromSQL = getFromSQL + " akas.region";
                somethingSelected = true;
            }
            innerJoin = true;
            innerJoinLocation = innerJoinLocation + " INNER JOIN akas ON titlebasics.tconst = akas.titleID";
        }
        
        
        
        if(displayStartingYear.isSelected()){
            if(somethingSelected){
                getFromSQL = getFromSQL + ",";
            }
            getFromSQL = getFromSQL + " titlebasics.startYear";
            somethingSelected = true;
        }
        
        if(displayEndingYear.isSelected()){
            if(somethingSelected){
                getFromSQL = getFromSQL + ",";
            }
            getFromSQL = getFromSQL + " titlebasics.endYear";
            somethingSelected = true;
        }
        
        if(!somethingSelected){
            getFromSQL = getFromSQL + " *";
        }
        
        //getFromSQL = getFromSQL + " FROM titlebasics";
        
        if(items.equals("Tv shows")){//Movies, Tv shows, Actor, Director

        getFromSQL = getFromSQL + " FROM titlebasics";
        }else if(items.equals("Movies")){

        getFromSQL = getFromSQL + " FROM titlebasics";
        }else if(items.equals("Actor")){
        getFromSQL = getFromSQL + " FROM namebasics";
        }else if(items.equals("Director")){
        getFromSQL = getFromSQL + " FROM namebasics";
        }
        
        //INNER JOIN ON
        if(innerJoin){
            getFromSQL = getFromSQL + innerJoinLocation;
        }
        
        //WHERE
        if(rangeYear.isSelected()){
            range = true;
            
            if((Integer)rangeYearLowerBound.getValue() < (Integer)rangeYearUpperBound.getValue()){
                rangeLocation = rangeLocation +" titlebasics.startYear >= " + (Integer)rangeYearLowerBound.getValue() + " AND titlebasics.startYear <= " + (Integer)rangeYearUpperBound.getValue();   
            }else{
                rangeLocation = rangeLocation +" titlebasics.startYear = " + (Integer)rangeYearLowerBound.getValue();
            }
            
        }
        
        
        
        if(rangeRatings.isSelected()){
            
            if(range){
                rangeLocation = rangeLocation + " AND";
            }
            
            if((Float)rangeRatingsLowerBound.getValue() < (Float)rangeRatingsUpperBound.getValue()){
                rangeLocation = rangeLocation +" ratings.averageRating >= " + (Float)rangeRatingsLowerBound.getValue() + " AND ratings.averageRating <= " + (Float)rangeRatingsUpperBound.getValue();   
            }else{
                rangeLocation = rangeLocation +" ratings.averageRating = " + (Float)rangeRatingsLowerBound.getValue();
            }
            range = true;
        }
        
        if(rangeDuration.isSelected()){
            
            if(range){
                rangeLocation = rangeLocation + " AND";
            }
            
            if((Integer)rangeDurationLowerBound.getValue() < (Integer)rangeDurationUpperBound.getValue()){
                rangeLocation = rangeLocation +" titlebasics.runtimeMinutes >= " + (Integer)rangeDurationLowerBound.getValue() + " AND titlebasics.runtimeMinutes <= " + (Integer)rangeDurationUpperBound.getValue();   
            }else{
                rangeLocation = rangeLocation +" titlebasics.runtimeMinutes = " + (Integer)rangeDurationLowerBound.getValue();
            }
            range = true;
        }
        
        if(!s.equals("Any")){
            if(range){
                rangeLocation = rangeLocation + " AND";
            }
            
            rangeLocation = rangeLocation + " akas.region = '" + (String)selectRegion.getSelectedItem() + "'";
            
            range = true;
        }
        
        String itemSelected = searchFor.getSelectedItem()+"";
        
        if(itemSelected.equals("Tv shows")){//Movies, Tv shows, Actor, Director
            if(range){
                rangeLocation = rangeLocation + " AND";
            }
            
            rangeLocation = rangeLocation + " titlebasics.titleType = 'tvEpisode'";
             
            range = true;
        }else if(itemSelected.equals("Movies")){
            if(range){
                rangeLocation = rangeLocation + " AND";
            }
            
            rangeLocation = rangeLocation + " titlebasics.titleType = 'movie'";
             
            range = true;
        }else if(itemSelected.equals("Actor")){
            
            String actorName = inputName.getText();
            if(!actorName.equals("")){
                if(range){
                rangeLocation = rangeLocation + " AND";
            }
                
            rangeLocation = rangeLocation + " namebasics.primaryName = '" + inputName.getText() + "'";
            range = true;
            }
            if(displayMovies.isSelected()){
                if(range){
                rangeLocation = rangeLocation + " AND";
            }
                rangeLocation = rangeLocation + " titlebasics.titleType = 'movie'";
                range = true;
            }
            
            if(displayTvShows.isSelected()){
                if(range){
                rangeLocation = rangeLocation + " AND";
            }
               rangeLocation = rangeLocation + " titlebasics.titleType = 'tvEpisode'";
               range = true;
            }
             
        }else if(itemSelected.equals("Director")){
           
            String actorName = inputName.getText();
            if(!actorName.equals("")){
                if(range){
                rangeLocation = rangeLocation + " AND";
            }
                rangeLocation = rangeLocation + " namebasics.primaryName = '" + inputName.getText() + "'";
                range = true;
            }
            if(displayMovies.isSelected()){
                if(range){
                rangeLocation = rangeLocation + " AND";
            }
                rangeLocation = rangeLocation + " titlebasics.titleType = 'movie'";
                range = true;
            }
            
            if(displayTvShows.isSelected()){
                if(range){
                rangeLocation = rangeLocation + " AND";
            }
               rangeLocation = rangeLocation + " titlebasics.titleType = 'tvEpisode'";
               range = true;
            }
            
             
        }
        
        if(range){
            getFromSQL = getFromSQL + rangeLocation;
        }

        String act1 = actor1.getText();
        String act2 = actor2.getText();
        String yr = "1880";
        String endyr = "2020";
        int yrTemp = 0;
        int endyrTemp = 0;

        if (rangeYear.isSelected())
        {
            yrTemp = (Integer)rangeYearLowerBound.getValue();
            endyrTemp = (Integer)rangeYearUpperBound.getValue();
        }

        if (yrTemp > 0 && endyrTemp > 0)
        {
            yr = Integer.toString(yrTemp);
            //yr = yr - 1;
            endyr = Integer.toString(endyrTemp);
            //endyr = endyr + 1;
        }


        int res1 = act1.compareTo("");
        int res2 = act2.compareTo("");
        boolean degCont = false;
        if (res1 != 0 && res2 != 0)
        {
            degCont = true;
        }

        if (!degCont)                                       // runs if not doing degree feature
        {
            getFromSQL = getFromSQL + " LIMIT 100;";

            /*getFromSQL = "SELECT * FROM namebasics " + 
            "INNER JOIN principals ON namebasics.nconst = principals.nconst " +
            //"INNER JOIN titlebasics ON titlebasics.tconst = principals.tconst " +
            "WHERE namebasics.primaryName = 'Martin Scorsese' LIMIT 10;";*/

            ResultSet result = null;
            ResultSetMetaData resultmd = null;

            //System.out.println(getFromSQL);

            try {
                System.out.println("Processing");  
                StringBuilder str = new StringBuilder();
                Statement stmt = conn.createStatement();
                //result = stmt.executeQuery("SELECT * FROM namebasics WHERE namebasics.primaryName = 'Martin Scorsese' LIMIT 100;");
                result = stmt.executeQuery(getFromSQL);
                resultmd = result.getMetaData();
                int columns = resultmd.getColumnCount();


            
            while (result.next()) {
                for (int i = 1; i < columns + 1; i++)
                {
                    if (i > 1) {
                        str.append(", ");
                    }
                    String temp = result.getString(i);
                    str.append(temp);

                    if (i >= columns)
                    {
                        str.append(" ");
                        str.append("\n");
                    }
                }
            }
            output.setText(str.toString());
            }
            catch(Exception e)
            {}
        }

        if (degCont)                                                // degrees feature
        {
            System.out.println("Degrees Processing");
            String actid1 = "";
            String actid2 = "";
            Vector<String> movieslist = new Vector<String>();
            Vector<String> movieslist2 = new Vector<String>();

            try 
            {
                Statement stmt = conn.createStatement();
                ResultSetMetaData resultmd = null;

                String sqlStatement = "SELECT principals.tconst, principals.nconst, titlebasics.primaryTitle, namebasics.primaryName FROM principals " + 
                "INNER JOIN titlebasics ON titlebasics.tconst = principals.tconst AND titlebasics.titleType = 'movie' " +
                "INNER JOIN namebasics ON namebasics.nconst = principals.nconst " +
                "WHERE principals.category = 'actor' AND titlebasics.startYear >= " + yr + " AND titlebasics.startYear <= " + endyr + ";";

                ResultSet result = stmt.executeQuery(sqlStatement);
                resultmd = result.getMetaData();
                int columns = resultmd.getColumnCount();
                int rows = 0;
                String[][] mat = new String[976749][4];

                for (int i = 0; i < 976749; i++)                        // fills in matrix with default values
                {
                    for (int j = 0; j < 4; j++)
                    {
                        mat[i][j] = "";
                    }
                }

                while (result.next()) {                                        // fills in matrix
                    for (int i = 0; i < columns; i++)
                    {
                        String temp = result.getString(i+1);
                        mat[rows][i] = temp;

                        if (i == 3 && actid1.length() == 0 && act1.equals(temp))
                        {
                            actid1 = mat[rows][1];
                            movieslist.add(mat[rows][0]);
                        }
                        if (i == 3 && actid2.length() == 0 && act2.equals(temp))
                        {
                            actid2 = mat[rows][1];
                            movieslist2.add(mat[rows][0]);
                        }
                        if (i == 1 && actid1.length() != 0 && mat[rows][i].equals(actid1))
                        {
                            movieslist.add(mat[rows][0]);
                        }
                        if (i == 1 && actid2.length() != 0 && mat[rows][i].equals(actid2))
                        {
                            movieslist2.add(mat[rows][0]);
                        }
                    }
                    rows++;
                }

                //System.out.println("movieslist size = " + movieslist.size());
                //System.out.println("movieslist2 size = " + movieslist2.size());

                Vector<String> finalpath = new Vector<String>();
                Vector<String> temppath = new Vector<String>();
                int finalDist = 10;
                int tempDist = 10;

                for (int i = 0; i < movieslist.size(); i++)     // Degree 1
                {
                    for (int j = 0; j < rows; j++)                // going through matrix to find actors in movielist
                    {
                        if (movieslist.get(i).equals(mat[j][0]))      
                        {
                            String tempact = mat[j][1];       // holds current actor
                            if (tempact.equals(actid2))       // checks if act1 and act2 are in same movie
                            {
                                    finalpath.clear();
                                    finalpath.add(mat[j][2]);
                                    finalpath.add(mat[j][3]);
                                    finalDist = 1;
                                    i = movieslist.size();
                                    j = rows;
                            }
                            else                                                    // Degree 2 search
                            {
                                if (finalDist > 2) {
                                    for (int i2 = 0; i2 < movieslist2.size(); i2++)
                                    {
                                        for (int j2 = 0; j2 < rows; j2++)
                                        {
                                            if (finalDist > 2 && movieslist2.get(i2).equals(mat[j2][0]) && tempact.equals(mat[j2][1]))
                                            {
                                                finalpath.add(mat[j][2]);
                                                finalpath.add(mat[j][3]);
                                                finalpath.add(mat[j2][2]);
                                                finalpath.add(act2);
                                                i2 = movieslist2.size();
                                                j2 = rows;
                                                finalDist = 2;
                                                System.out.println("success");
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                String outres = act1;
                for (int i = 0; i < finalpath.size(); i++)
                {
                    outres = outres + " -> " + finalpath.get(i);
                }

                output.setText(outres);

                actid1 = "";
                actid2 = "";
            }
            catch (Exception e){
                System.out.println("Error accessing Database.");
            }

        }


        System.out.println("Done");
      

        }
      
        
    }                                           

    private void clearChecksActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
        displayMainTitle.setSelected(false);
        displayCast.setSelected(false);
        displayRatings.setSelected(false);
        displayDuration.setSelected(false);
        displayRegion.setSelected(false);
        displayStartingYear.setSelected(false);
        displayEndingYear.setSelected(false);
        displayMovies.setSelected(false);
        displayTvShows.setSelected(false);
        rangeYear.setSelected(false);
        rangeRatings.setSelected(false);
        rangeDuration.setSelected(false);
        selectRegion.setSelectedIndex(0);
        rangeYearLowerBound.setEnabled(false);
        rangeYearUpperBound.setEnabled(false);
        rangeRatingsLowerBound.setEnabled(false);
        rangeRatingsUpperBound.setEnabled(false);
        rangeDurationLowerBound.setEnabled(false);
        rangeDurationUpperBound.setEnabled(false);
    }                                           

    private void rangeYearLowerBoundStateChanged(javax.swing.event.ChangeEvent evt) {                                                 
        // TODO add your handling code here:

        if((Integer)rangeYearLowerBound.getValue() > (Integer)rangeYearUpperBound.getValue()){
            rangeYearUpperBound.setValue(rangeYearLowerBound.getValue());
        }
    }                                                

    private void rangeRatingsLowerBoundStateChanged(javax.swing.event.ChangeEvent evt) {                                                    
        // TODO add your handling code here:
        if((Float)rangeRatingsLowerBound.getValue() > (Float)rangeRatingsUpperBound.getValue()){
            rangeRatingsUpperBound.setValue(rangeRatingsLowerBound.getValue());
        }
    }                                                   

    private void rangeDurationLowerBoundStateChanged(javax.swing.event.ChangeEvent evt) {                                                     
        // TODO add your handling code here:
        if((Integer)rangeDurationLowerBound.getValue() > (Integer)rangeDurationUpperBound.getValue()){
            rangeDurationUpperBound.setValue(rangeDurationLowerBound.getValue());
        }
    }                                                    

    private void rangeYearUpperBoundStateChanged(javax.swing.event.ChangeEvent evt) {                                                 
        // TODO add your handling code here:
        if((Integer)rangeYearLowerBound.getValue() > (Integer)rangeYearUpperBound.getValue()){
            rangeYearLowerBound.setValue(rangeYearUpperBound.getValue());
        }
    }                                                

    private void rangeRatingsUpperBoundStateChanged(javax.swing.event.ChangeEvent evt) {                                                    
        // TODO add your handling code here:
        if((Float)rangeRatingsLowerBound.getValue() > (Float)rangeRatingsUpperBound.getValue()){
            rangeRatingsLowerBound.setValue(rangeRatingsUpperBound.getValue());
        }
    }                                                   

    private void rangeDurationUpperBoundStateChanged(javax.swing.event.ChangeEvent evt) {                                                     
        // TODO add your handling code here:
        if((Integer)rangeDurationLowerBound.getValue() > (Integer)rangeDurationUpperBound.getValue()){
            rangeDurationLowerBound.setValue(rangeDurationUpperBound.getValue());
        }
    }                                                    

    private void selectRegionActionPerformed(java.awt.event.ActionEvent evt) {                                             
        // TODO add your handling code here:
    }                                            

    private void saveToFileActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // TODO add your handling code here:
                try {
        JFrame parentFrame = new JFrame();
 
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Specify a file to save");   

        int userSelection = fileChooser.showSaveDialog(parentFrame);

        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToSave = fileChooser.getSelectedFile();
            System.out.println("Save as file: " + fileToSave.getAbsolutePath());
		 
        
        
            PrintWriter outputFile = new PrintWriter(fileToSave + ".txt");
													
            outputFile.print(output.getText());
            outputFile.close();
        }
        } catch (FileNotFoundException ex) {
            System.out.println("Error Saving To File.");
        }
        
    }                                          

    private void recommendationsActionPerformed(java.awt.event.ActionEvent evt) {                                                
        // TODO add your handling code here:
        String itemSelected = searchFor.getSelectedItem()+"";
        
        
        
        if(recommendations.isEnabled()){
            if(itemSelected.equals("Tv shows")){//Movies, Tv shows, Actor, Director
             inputName.setEnabled(true);
        }else if(itemSelected.equals("Movies")){
            inputName.setEnabled(true);
        }
        }else{
            if(itemSelected.equals("Tv shows")){//Movies, Tv shows, Actor, Director
             inputName.setEnabled(false);
        }else if(itemSelected.equals("Movies")){
            inputName.setEnabled(false);
        }
        }
    }                                               

    private void recommendationsStateChanged(javax.swing.event.ChangeEvent evt) {                                             
        // TODO add your handling code here:
        String itemSelected = searchFor.getSelectedItem()+"";
        
        
        
        if(recommendations.isEnabled()){
            if(itemSelected.equals("Tv shows")){//Movies, Tv shows, Actor, Director
             inputName.setEnabled(true);
        }else if(itemSelected.equals("Movies")){
            inputName.setEnabled(true);
        }
        }else{
            if(itemSelected.equals("Tv shows")){//Movies, Tv shows, Actor, Director
             inputName.setEnabled(false);
        }else if(itemSelected.equals("Movies")){
            inputName.setEnabled(false);
        }
        }
    }                                            

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
		
		dbSetup my = new dbSetup();
        //Building the connection
      

        try {
            Class.forName("org.postgresql.Driver");
            conn = DriverManager.getConnection("jdbc:postgresql://db-315.cse.tamu.edu/data",
            my.user, my.pswd);
        } catch (Exception e) {
            e.printStackTrace();
            System.err.println(e.getClass().getName()+": "+e.getMessage());
            System.exit(0);
        }//end try catch

        JOptionPane.showMessageDialog(null,"Opened database successfully");
        String cus_lname = "";
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(jdbcpostgreSQLGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(jdbcpostgreSQLGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(jdbcpostgreSQLGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(jdbcpostgreSQLGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new jdbcpostgreSQLGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JTextPane actor1;
    private javax.swing.JTextPane actor2;
    private javax.swing.JButton clearChecks;
    private javax.swing.JCheckBox displayCast;
    private javax.swing.JCheckBox displayDuration;
    private javax.swing.JCheckBox displayEndingYear;
    private javax.swing.JCheckBox displayMainTitle;
    private javax.swing.JCheckBox displayMovies;
    private javax.swing.JCheckBox displayRatings;
    private javax.swing.JCheckBox displayRegion;
    private javax.swing.JCheckBox displayStartingYear;
    private javax.swing.JCheckBox displayTvShows;
    private javax.swing.JLabel inputLabel;
    private javax.swing.JTextArea inputName;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextPane output;
    private javax.swing.JCheckBox rangeDuration;
    private javax.swing.JSpinner rangeDurationLowerBound;
    private javax.swing.JSpinner rangeDurationUpperBound;
    private javax.swing.JCheckBox rangeRatings;
    private javax.swing.JSpinner rangeRatingsLowerBound;
    private javax.swing.JSpinner rangeRatingsUpperBound;
    private javax.swing.JCheckBox rangeYear;
    private javax.swing.JSpinner rangeYearLowerBound;
    private javax.swing.JSpinner rangeYearUpperBound;
    private javax.swing.JCheckBox recommendations;
    private javax.swing.JButton saveToFile;
    private javax.swing.JComboBox<String> searchFor;
    private javax.swing.JButton searchQuery;
    private javax.swing.JComboBox<String> selectRegion;
    // End of variables declaration                   
}

